
```{r}
library(tidyverse)
library(brms)

```


```{r}
df_fg <- read_csv('data/field_goal_attempts.csv')
df_kickers <- read_csv('data/kickers.csv')
```


```{r}
df_fg |> glimpse()
df_kickers |> glimpse()
```


```{r}
df <- df_fg |>
    left_join(df_kickers)  |>
    mutate(
        across(c(game_date, birthdate), mdy),
        current_age = season - year(birthdate)
        ) |>
    select(-birthdate)
```

```{r}
df |>
  group_by(season, distance = floor(attempt_yards / 2) * 2) |>
  summarise(
    success = sum(field_goal_result == 'Made') / n(),
    kicks = n()
  ) |>
  ggplot(aes((distance), success, color = season, group = season)) +
  geom_smooth(se = FALSE) +
  geom_point(aes(size = kicks), alpha = 0.2)
```

Check what priors would look like with a simple model

```{r}
df$response = as.integer(df$field_goal_result == 'Made')
simple_model <- brm(
  response ~ 1 + attempt_yards,
  data = df, family = 'bernoulli',
  prior = c(
    prior(normal(0, 0.5), class = Intercept),
    prior(normal(0, 0.5), class = b)
  ),
  chains = '4', cores = '4', backend = 'cmdstan', sample_prior = 'only'
)
```


```{r}
fit <- brm(
  #response ~ s(attempt_yards) + (1 | player_id) + (1 | season),
  response ~ s(attempt_yards) + (1 + attempt_yards | player_id) + (1 | season),
  family = bernoulli(),
  data = df,
  prior = c(
    prior(normal(0, 5), class = "Intercept"),
    prior(student_t(3, 0, 1), class = 'sd', group = 'player_id'),
    prior(exponential(1), class = "sd")
  ),
  cores = 4,
  chains = 4,
  backend = "cmdstan",
  file = 'fit_varrying_slope.rds'
)
```


```{r}
library(tidybayes)
# tidybayes to get expected probs per kick
df_draws <- df |>
  filter(season_type == 'Reg') |>
  #filter(field_goal_result != 'Blocked') |>
  filter(season == 2018) |>
  add_epred_draws(fit, re_formula = NA, allow_new_levels = TRUE) # remove kicker effect to get "average kicker"

df_goe <- df_draws |>
  mutate(residual = response - .epred) |>
  group_by(.draw, player_id, player_name) |>
  summarise(goe = sum(residual), .groups = "drop")

# summarize per kicker
df_goe_summary <- df_goe |>
  group_by(player_id, player_name) |>
  median_qi(goe) |>
  ungroup() |>
  arrange(-goe)

```



```{r}
df_goe |>
  #filter(player_id %in% df_goe_summary[c(1:10, 117:127), ]$player_id) |>
  ggplot(aes(goe, reorder(player_name, goe), color = player_name == 'JUSTIN TUCKER')) +
  stat_halfeye() +
  labs(
    y = NULL
  ) +
  scale_color_manual(values = c('grey', 'firebrick')) +
  theme_bw() +
  theme(legend.position = 'none')
```


```{r}
df_draws <- df |>
  filter(season == 2018) |>
  add_epred_draws(fit)
```


```{r}
df |>
  filter(
    season == 2018,
    player_name %in% c('JUSTIN TUCKER', 'MATT PRATER')
  ) |>
  distinct(season, player_id, player_name) |>
  mutate(
    attempt_yards = list(seq(2, 67, 2))
  ) |>
  unnest(col = attempt_yards) |>
  add_epred_draws(fit, allow_new_levels = TRUE) |>
  ggplot(aes(attempt_yards, .epred, color = player_name)) +
  stat_lineribbon(alpha = 0.25) +
  scale_fill_brewer(palette = "Greys") +
  theme_light()
```


```{r}
empirical_dist <- df |>
  filter(season > 2015) |>
  count(attempt_yards) |>
  mutate(prob = n / sum(n))

set.seed(528)

n_attempts_per_kicker <- 30 # or whatever feels realistic

kick_attempts_list <- list(
  sample(
    empirical_dist$attempt_yards,
    size = n_attempts_per_kicker,
    replace = TRUE,
    prob = empirical_dist$prob
  )
) |>
  _[[1]] |>
  sort() +
  rnorm(n_attempts_per_kicker, sd = 0.02)

test_set <- df |>
  filter(season == 2018) |>
  distinct(player_id, player_name) |>
  #rowwise() |>
  crossing(
    attempt_yards = list(rep(50, 100)) #kick_attempts_list
  ) |>
  unnest(attempt_yards)

df_test_preds <- test_set |>
  add_epred_draws(fit, allow_new_levels = TRUE) |>
  group_by(player_id, player_name, .draw) |>
  summarise(
    attempts = n(),
    expected_makes = sum(.epred),
    .groups = "drop"
  )

df_test_preds |>
  ggplot(aes(expected_makes, reorder(player_name, expected_makes))) +
  stat_pointinterval()

df_test_preds |>
  ggplot(aes(expected_makes, group = player_id)) +
  stat_slab(
    fill = NA,
    aes(color = player_name == 'JUSTIN TUCKER'),
    alpha = 0.2,
    \(x) x |> filter(player_name != 'JUSTIN TUCKER')
  ) +
  stat_slab(
    fill = NA,
    aes(color = player_name == 'JUSTIN TUCKER'),
    data = \(x) x |> filter(player_name == 'JUSTIN TUCKER')
  ) +
  scale_color_manual(values = c('grey', 'red')) +
  theme_bw() +
  theme(legend.position = 'none') +
  labs(
    title = 'Simulated 100 50yd field goals'
    x = 'Simulated 30 FG',
    y = 'Density'
  )


```

```{r}
df |>
  filter(
    season == 2018,
    #player_name %in% c('JUSTIN TUCKER', 'MATT PRATER')
  ) |>
  distinct(season, player_id, player_name) |>
  mutate(
    attempt_yards = list(seq(5, 65, 2))
  ) |>
  unnest(col = attempt_yards) |>
  add_epred_draws(fit, allow_new_levels = TRUE) |>
  group_by(player_id, player_name, .draw) |>
  summarise(
    expected_makes = sum(.epred),
    .groups = "drop"
  ) -> df_2018

df_2018 |>
  group_by(player_name, player_id) |>
  summarise(
    rating = mean(expected_makes),
    .lower = quantile(expected_makes, 0.1),
    .upper = quantile(expected_makes, 0.9),
    .groups = "drop"
  ) |>
  arrange(desc(rating)) |>
  mutate(rank = row_number())

df_2018  |>
    ggplot(aes(expected_makes, reorder(player_name, expected_makes))) +
    stat_pointinterval()
```



Using weights


```{r}
df_combined <- df |>
  mutate(weight = if_else(season < 2018, 0.75, 0.25)) |>
  filter((season == 2018 & week <= 6) | season < 2018)

fit_updated <- brm(
  response ~ s(attempt_yards) + (1 | player_id) + (1 | season),
  family = bernoulli(),
  data = df_combined,
  weights = "weight",
  prior = c(
    prior(normal(0, 5), class = "Intercept"),
    prior(exponential(1), class = "sd")
  ),
  cores = 4,
  chains = 4,
  backend = "cmdstan"
)
```


```{r}
df |>
  filter(player_id != 21213) |>
  mutate(attempt_yards = floor(attempt_yards / 5) * 5) |>
summarise(
  response = mean(response),
  .by = c(season, attempt_yards, current_age)
) |>
  ggplot(aes(current_age, response)) +
  geom_smooth()
```


looking at latent skill


```{r}
df_skill <- fit |>
  as_draws_df() |>
  select(starts_with('r_player')) |>
  pivot_longer(everything()) |>
  mutate(player_id = str_extract(name, '\\d+') |> as.numeric()) |>
  left_join(df |> distinct(player_id, player_name))

df_skill |>
  filter(
    player_id %in% (df |> filter(season == 2018) |> pull(player_id) |> unique())
  )  |>
    ggplot(aes(value, reorder(player_name, value))) +
  stat_halfeye()
```


```{r}
df_skill_summary <- df_skill |>
  group_by(player_id, player_name) |>
  summarise(
    rating = mean(value),
    .groups = "drop"
  )

min_rating <- min(df_skill$value)
max_rating <- max(df_skill$value)

df_skill <- df_skill |>
  mutate(
    rating_index = 100 * (value - min_rating) / (max_rating - min_rating)
  )

df_skill |>
  filter(player_id %in% df[df$season == 2018, ]$player_id) |>
  ggplot(aes(rating_index, reorder(player_name, rating_index))) +
  stat_pointinterval()

df_skill |>
  filter(player_id %in% df[df$season == 2018, ]$player_id) |>
  group_by(player_name) |>
  median_hdci(value, .width = .97) |>
  arrange(-value)
```

## THIS IS PROMISING

```{r}
weights <- df %>%
  count(attempt_yards) %>%
  mutate(weight = n / sum(n))

kick_draws %>%
  left_join(weights, by = "attempt_yards") %>%
  mutate(weighted_score = .epred * weight) %>%
  group_by(player_id, player_name, .draw) %>%
  summarise(rating = sum(weighted_score), .groups = "drop")

kick_grid <- expand.grid(
  player_id = unique(df$player_id),
  attempt_yards = seq(20, 60, by = 1),
  season = 2018
) |>
  left_join(df |> distinct(player_id, player_name))

kick_grid_draws <- kick_grid %>%
  add_epred_draws(fit, newdata = ., re_formula = NULL, ndraws = 100)

avg_draws <- kick_grid_draws %>%
  group_by(.draw, attempt_yards) %>%
  summarise(avg_p = mean(.epred), .groups = "drop")


kicker_advantage <- kick_grid_draws %>%
  filter(player_id %in% df[df$season == 2018, ]$player_id) |>
  left_join(avg_draws, by = c(".draw", "attempt_yards")) %>%

  mutate(diff = .epred - avg_p) %>%
  group_by(player_id, player_name, .draw) %>%
  summarise(
    rating = sum(diff), # total expected edge over average kicker
    .groups = "drop"
  )


leaderboard <- kicker_advantage %>%
  group_by(player_id, player_name) %>%
  summarise(
    rating = mean(rating),
    lower = quantile(rating, 0.1),
    upper = quantile(rating, 0.9)
  ) %>%
  arrange(desc(rating)) %>%
  mutate(rank = row_number())

kicker_advantage |>
  ggplot(aes(rating, reorder(player_name, rating))) +
  stat_pointinterval() +
  geom_vline(xintercept = 0, linetype = 'dashed') +
  theme_bw(base_size = 12) +
  theme() +
  labs(
    x = 'FGOE',
    y = NULL,
    title = 'Field Goals over Expected',
    subtitle = 'Posterior distirbution of FGOE on a standard set of kicks from distance 20-60 yards'
  )

kicker_advantage |>
  ggplot(aes(rating)) +
  stat_slab(color = 'black', aes(group = player_name), fill = NA)



kick_grid_draws %>%
  filter(player_id %in% df[df$season == 2018, ]$player_id) |>
  filter(player_name %in% c('JUSTIN TUCKER', 'ROBERTO AGUAYO')) |>
#   group_by(player_id, player_name, attempt_yards) %>%
#   summarise(
#     prob_mean = mean(.epred),
#     prob_lower = quantile(.epred, 0.1),
#     prob_upper = quantile(.epred, 0.9),
#     .groups = "drop"
#   ) %>%
  ggplot(aes(x = attempt_yards, y = .epred, color = player_name)) +
  stat_lineribbon(alpha = 0.5) +
  #facet_wrap(~player_name) +
  labs(
    title = "Kicker-Specific Field Goal Probabilities by Distance",
    y = "P(Make)",
    x = "Attempt Distance (yards)",
    fill = NULL,
    color = 'Player'
  ) +
  theme_minimal() +
  scale_fill_brewer(palette = 'Greys', guide = 'none') +
  scale_color_manual(values = c("#241773", "#A71930")) +
  theme(legend.position = 'top')


kick_grid_draws %>%
  group_by(player_id, player_name, .draw) %>%
  summarise(
    composite_score = sum(.epred),
    .groups = "drop"
  ) %>%
  group_by(player_id, player_name) %>%
  summarise(
    mean_score = mean(composite_score),
    lower = quantile(composite_score, 0.1),
    upper = quantile(composite_score, 0.9)
  ) %>%
  arrange(desc(mean_score)) |>
  View()


kick
```


```{r}
draws <- fit |>
  as_draws_df() |>
  select(starts_with('r_player'), .draw) |>
  pivot_longer(-.draw) |>
  mutate(player_id = str_extract(name, '\\d+') |> as.numeric()) |>
  left_join(df |> distinct(player_id, player_name))

draws_rank <- draws |>
    group_by(.draw) |>
  mutate(draw_rank = rank(-value, ties.method = "min")) |>
  ungroup()

draws_rank |>
    filter(draw_rank <= 5) |>
    count(player_name, player_id, name = 'top5', sort = T) |>
    mutate(top5_perc = top5 / max(draws_rank$.draw))
```

marginal effects
```{r}
library(marginaleffects)
marginaleffects::avg_comparisons(fit, df |> filter(season == 2018))
```


```{r}
nd = datagrid(
  model = fit,
  attempt_yards = 50
)

p1 <- predictions(fit, type = 'response', newdata = nd) |>
    transform(type = 'Response')
p2 <- predictions(fit, type = "prediction", newdata = nd) |>
  get_draws() |>
  transform(type = "Prediction")

pred <- rbind(p1, p2)
```


```{r}
df |>
    distinct(season, player_id, player_name) |>
    filter(season == '2018') |>
    mutate(
        attempt_yards = list(1:65)
    ) |>
    unnest(cols = attempt_yards) |>
    add_epred_draws(fit) |>
    group_by(player_id, player_name, .draw) |>
    summarise(
        x = sum(.epred),
        .groups = 'drop'
    ) |>
    ggplot(aes(x, reorder(player_name, x))) +
    stat_pointinterval()
```
